use jni::sys::*;

use crate::core::property::*;
use crate::core::*;

foreign_enum!(
    enum PropertyType {
        Null = PropertyType::Null,
        Boolean = PropertyType::Boolean,
        Number = PropertyType::Number,
        String = PropertyType::String,
        Map = PropertyType::Map,
        Array = PropertyType::Array,
    }
);

foreign_typemap!(
    ($p:r_type) Vec<PropertyType> => Vec<i32> {
        $out = $p.iter().map(|ele| ele.to_owned() as i32).collect();
    };
);

foreign_class!(class PropertyValue {
    self_type PropertyValue;
    private constructor = empty;
    fn PropertyVale::property_type(&self) -> PropertyType {
        this.property_type.clone()
    }
    fn PropertyValue::as_bool(&self) -> bool {
        this.value.as_bool().unwrap()
    }
    fn PropertyValue::as_string(&self) -> String {
        this.value.as_str().unwrap().to_owned()
    }
    fn PropertyValue::as_map(&self) -> PropertyMap {
        PropertyMap::new(this.value.as_object().unwrap().clone())
    }
    fn PropertyValue::as_array(&self) -> PropertyList {
        PropertyList::new(this.value.as_array().unwrap().clone())
    }
    fn PropertyValue::as_number(&self) -> f64 {
        this.value.as_f64().unwrap()
    }
    foreign_code r#"
    public Object getValue() {
        switch (property_type()) {
            case Null:
                return null;
            case Number:
                return as_number();
            case Boolean:
                return as_bool();
            case String:
                return as_string();
            case Map:
                return as_map();
            case Array:
                return as_array();
            default:
                throw new IllegalStateException("Unexpected value: " + property_type());
        }
    }
    "#;
});

foreign_class!(class PropertyMap {
    self_type PropertyMap;
    private constructor = empty;
    fn PropertyMap::import_keys(&self) -> Vec<String>; alias importKeys;
    fn PropertyMap::import_values(&self) -> Vec<PropertyValue>; alias importValues;
    fn PropertyMap::import_types(&self) -> Vec<PropertyType>; alias rawImportTypes;
    foreign_code r#"
    public PropertyType[] importTypes() {
        int[] rawTypes = rawImportTypes();
        PropertyType[] types = new PropertyType[rawTypes.length];
        for (int i = 0;i < types.length;i++) {
            types[i] = PropertyType.fromInt(rawTypes[i]);
        }
        return types;
    }
    "#;
});

foreign_class!(class PropertyList {
    self_type PropertyList;
    private constructor = empty;
});

foreign_callback!(
    callback UIManager {
        self_type UIManager;
        createView = create_view(&self, tag: u16, class_name: &str, root_view_tag: u16, properties: PropertyMap);
        setChildren = set_children(&self, tag: u16, children: PropertyList);
        onBatchComplete = on_batch_complete(&self);
    }
);

foreign_class!(class Engine {
    self_type Engine;
    constructor Engine::new(manager: Box<dyn UIManager>) -> Engine;
    fn Engine::launch(&self) -> ();
    fn Engine::run_app(&self, _: i32) -> (); alias runApp;
});
