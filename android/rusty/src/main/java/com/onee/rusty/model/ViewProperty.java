// automatically generated by the FlatBuffers compiler, do not modify

package com.onee.rusty.model;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ViewProperty extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static ViewProperty getRootAsViewProperty(ByteBuffer _bb) { return getRootAsViewProperty(_bb, new ViewProperty()); }
  public static ViewProperty getRootAsViewProperty(ByteBuffer _bb, ViewProperty obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ViewProperty __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double width() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double height() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double marginLeft() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double marginRight() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double marginTop() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double marginBottom() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public int flex() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int display() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int flexDirection() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int backgroundColor() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int flexWrap() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createViewProperty(FlatBufferBuilder builder,
      double width,
      double height,
      double marginLeft,
      double marginRight,
      double marginTop,
      double marginBottom,
      int flex,
      int display,
      int flexDirection,
      int backgroundColor,
      int flexWrap) {
    builder.startTable(11);
    ViewProperty.addMarginBottom(builder, marginBottom);
    ViewProperty.addMarginTop(builder, marginTop);
    ViewProperty.addMarginRight(builder, marginRight);
    ViewProperty.addMarginLeft(builder, marginLeft);
    ViewProperty.addHeight(builder, height);
    ViewProperty.addWidth(builder, width);
    ViewProperty.addFlexWrap(builder, flexWrap);
    ViewProperty.addBackgroundColor(builder, backgroundColor);
    ViewProperty.addFlexDirection(builder, flexDirection);
    ViewProperty.addDisplay(builder, display);
    ViewProperty.addFlex(builder, flex);
    return ViewProperty.endViewProperty(builder);
  }

  public static void startViewProperty(FlatBufferBuilder builder) { builder.startTable(11); }
  public static void addWidth(FlatBufferBuilder builder, double width) { builder.addDouble(0, width, 0.0); }
  public static void addHeight(FlatBufferBuilder builder, double height) { builder.addDouble(1, height, 0.0); }
  public static void addMarginLeft(FlatBufferBuilder builder, double marginLeft) { builder.addDouble(2, marginLeft, 0.0); }
  public static void addMarginRight(FlatBufferBuilder builder, double marginRight) { builder.addDouble(3, marginRight, 0.0); }
  public static void addMarginTop(FlatBufferBuilder builder, double marginTop) { builder.addDouble(4, marginTop, 0.0); }
  public static void addMarginBottom(FlatBufferBuilder builder, double marginBottom) { builder.addDouble(5, marginBottom, 0.0); }
  public static void addFlex(FlatBufferBuilder builder, int flex) { builder.addInt(6, flex, 0); }
  public static void addDisplay(FlatBufferBuilder builder, int display) { builder.addInt(7, display, 0); }
  public static void addFlexDirection(FlatBufferBuilder builder, int flexDirection) { builder.addInt(8, flexDirection, 0); }
  public static void addBackgroundColor(FlatBufferBuilder builder, int backgroundColor) { builder.addInt(9, backgroundColor, 0); }
  public static void addFlexWrap(FlatBufferBuilder builder, int flexWrap) { builder.addInt(10, flexWrap, 0); }
  public static int endViewProperty(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishViewPropertyBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedViewPropertyBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ViewProperty get(int j) { return get(new ViewProperty(), j); }
    public ViewProperty get(ViewProperty obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

